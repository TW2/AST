/*
 * Copyright (C) 2024 util2
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.wingate.ast.sub;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.wingate.ast.util.Helper;

/**
 *
 * @author util2
 */
public class ASS {
    
    private String title;
    private int wrapStyle;
    private int playResX;
    private int playResY;
    
    private final List<Style> styles = new ArrayList<>();
    private final List<Event> events = new ArrayList<>();

    public ASS() {
        title = "Translate with LibreTranslate";
        wrapStyle = 0;
        playResX = 1280;
        playResY = 720;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public int getWrapStyle() {
        return wrapStyle;
    }

    public void setWrapStyle(int wrapStyle) {
        this.wrapStyle = wrapStyle;
    }

    public int getPlayResX() {
        return playResX;
    }

    public void setPlayResX(int playResX) {
        this.playResX = playResX;
    }

    public int getPlayResY() {
        return playResY;
    }

    public void setPlayResY(int playResY) {
        this.playResY = playResY;
    }

    public List<Style> getStyles() {
        return styles;
    }

    public List<Event> getEvents() {
        return events;
    }
    
    public void write(String path){
        try(PrintWriter pw = new PrintWriter(path, StandardCharsets.UTF_8);){
            pw.println("[Script Info]");
            pw.println("; Script generated by AST");
            pw.println("; https://github.com/TW2/AST");
            pw.println("Title: " + title);
            pw.println("ScriptType: v4.00+");
            pw.println("WrapStyle: " + wrapStyle);
            pw.println("PlayResX: " + playResX);
            pw.println("PlayResY: " + playResY);
            pw.println("");
            pw.println("[V4+ Styles]");
            pw.println("Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding");
            for(Style style : styles){
                writeStyle(pw, style);
            }
            pw.println("");
            
            pw.println("[Events]");
            pw.println("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text");
            for(Event event : events){
                writeEvent(pw, event);
            }
            pw.println("");
            
			
        } catch (IOException ex) {
            Logger.getLogger(ASS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void writeStyle(PrintWriter pw, Style style){
        // Colors
        String c1 = Helper.getABGR(style.getTextColor()); if(c1.endsWith("&")) c1 = c1.substring(0, c1.length() - 2);
        String c2 = Helper.getABGR(style.getKaraokeColor()); if(c2.endsWith("&")) c2 = c2.substring(0, c2.length() - 2);
        String c3 = Helper.getABGR(style.getOutlineColor()); if(c3.endsWith("&")) c3 = c3.substring(0, c3.length() - 2);
        String c4 = Helper.getABGR(style.getShadowColor()); if(c4.endsWith("&")) c4 = c4.substring(0, c4.length() - 2);
        String b = style.isBold() ? "-1" : "0";
        String i = style.isItalic()? "-1" : "0";
        String u = style.isUnderline()? "-1" : "0";
        String s = style.isStrikeOut()? "-1" : "0";
        String sx = Integer.toString(Math.round(style.getScaleX() * 100));
        String sy = Integer.toString(Math.round(style.getScaleY() * 100));
        
        pw.print("Style: ");
        pw.print(style.getName() + ",");
        pw.print(style.getFont().getFontName() + ",");
        pw.print(style.getFont().getSize() + ",");
        pw.print(c1 + ",");
        pw.print(c2 + ",");
        pw.print(c3 + ",");
        pw.print(c4 + ",");
        pw.print(b + ",");
        pw.print(i + ",");
        pw.print(u + ",");
        pw.print(s + ",");
        pw.print(sx + ",");
        pw.print(sy + ",");
        pw.print((int)style.getSpacing() + ",");
        pw.print((int)style.getAngleZ() + ",");
        pw.print(style.getBorderStyle() + ",");
        pw.print(Float.toString(style.getOutline()).replace(",", ".") + ",");
        pw.print(Float.toString(style.getShadow()).replace(",", ".") + ",");
        pw.print(style.getAlignment()+ ",");
        pw.print(style.getMarginL()+ ",");
        pw.print(style.getMarginR()+ ",");
        pw.print(style.getMarginV()+ ",");
        pw.println(style.getEncoding());
    }
    
    private void writeEvent(PrintWriter pw, Event event){
        pw.print(event.getType().getName() + ": ");
        pw.print(event.getLayer() + ",");
        pw.print(event.getTime().getStartString() + ",");
        pw.print(event.getTime().getEndString() + ",");
        pw.print(event.getStyle().getName() + ",");
        pw.print(event.getName() + ",");
        pw.print(event.getMarginL() + ",");
        pw.print(event.getMarginR() + ",");
        pw.print(event.getMarginV() + ",");
        pw.print(event.getEffect() + ",");
        pw.println(event.getText().getText() + ",");
    }
    
    public void read(String path){
        // Read file by line
        try(FileInputStream fis = new FileInputStream(path); 
                InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8); 
                BufferedReader br = new BufferedReader(isr);){
            
            String line;
            while((line = br.readLine()) != null){
                
                //[Script Info]
                if(line.startsWith("Title")){ setTitle(line.substring("Title: ".length())); }
                //+
                if(line.startsWith("WrapStyle")){ wrapStyle = Integer.parseInt(line.substring("WrapStyle: ".length())); }
                if(line.startsWith("PlayResX")){ playResX = Integer.parseInt(line.substring("PlayResX: ".length())); }
                if(line.startsWith("PlayResY")){ playResY = Integer.parseInt(line.substring("PlayResY: ".length())); }
                
                //[V4+ Styles]                
                if(line.startsWith("Style")){
                    styles.add(new Style(line));
                }
                //[Events]
                if(line.startsWith("Comment: ") || line.startsWith("Dialogue: ")){
                    events.add(new Event(line, styles));
                }
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ASS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ASS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
